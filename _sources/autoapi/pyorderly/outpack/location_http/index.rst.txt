pyorderly.outpack.location_http
===============================

.. py:module:: pyorderly.outpack.location_http


Classes
-------

.. autoapisummary::

   pyorderly.outpack.location_http.OutpackHTTPClient
   pyorderly.outpack.location_http.OutpackLocationHTTP


Functions
---------

.. autoapisummary::

   pyorderly.outpack.location_http.raise_http_error


Module Contents
---------------

.. py:function:: raise_http_error(response: requests.Response)

.. py:class:: OutpackHTTPClient(url: str, authentication=None)

   Bases: :py:obj:`requests.Session`


   A Requests session.

   Provides cookie persistence, connection-pooling, and configuration.

   Basic Usage::

     >>> import requests
     >>> s = requests.Session()
     >>> s.get('https://httpbin.org/get')
     <Response [200]>

   Or as a context manager::

     >>> with requests.Session() as s:
     ...     s.get('https://httpbin.org/get')
     <Response [200]>


   .. py:method:: request(method, path, *args, **kwargs)

      Constructs a :class:`Request <Request>`, prepares it and sends it.
      Returns :class:`Response <Response>` object.

      :param method: method for the new :class:`Request` object.
      :param url: URL for the new :class:`Request` object.
      :param params: (optional) Dictionary or bytes to be sent in the query
          string for the :class:`Request`.
      :param data: (optional) Dictionary, list of tuples, bytes, or file-like
          object to send in the body of the :class:`Request`.
      :param json: (optional) json to send in the body of the
          :class:`Request`.
      :param headers: (optional) Dictionary of HTTP Headers to send with the
          :class:`Request`.
      :param cookies: (optional) Dict or CookieJar object to send with the
          :class:`Request`.
      :param files: (optional) Dictionary of ``'filename': file-like-objects``
          for multipart encoding upload.
      :param auth: (optional) Auth tuple or callable to enable
          Basic/Digest/Custom HTTP Auth.
      :param timeout: (optional) How long to wait for the server to send
          data before giving up, as a float, or a :ref:`(connect timeout,
          read timeout) <timeouts>` tuple.
      :type timeout: float or tuple
      :param allow_redirects: (optional) Set to True by default.
      :type allow_redirects: bool
      :param proxies: (optional) Dictionary mapping protocol or protocol and
          hostname to the URL of the proxy.
      :param hooks: (optional) Dictionary mapping hook name to one event or
          list of events, event must be callable.
      :param stream: (optional) whether to immediately download the response
          content. Defaults to ``False``.
      :param verify: (optional) Either a boolean, in which case it controls whether we verify
          the server's TLS certificate, or a string, in which case it must be a path
          to a CA bundle to use. Defaults to ``True``. When set to
          ``False``, requests will accept any TLS certificate presented by
          the server, and will ignore hostname mismatches and/or expired
          certificates, which will make your application vulnerable to
          man-in-the-middle (MitM) attacks. Setting verify to ``False``
          may be useful during local development or testing.
      :param cert: (optional) if String, path to ssl client cert file (.pem).
          If Tuple, ('cert', 'key') pair.
      :rtype: requests.Response



.. py:class:: OutpackLocationHTTP(url: str, authentication=None)

   Bases: :py:obj:`pyorderly.outpack.location_driver.LocationDriver`


   A location implementation.

   The driver object is treated as a context manager and is entered and exited
   before and after its methods are called.


   .. py:method:: __enter__()

      Return `self` upon entering the runtime context.



   .. py:method:: __exit__(*args)

      Raise any exception triggered within the runtime context.



   .. py:method:: list() -> dict[str, pyorderly.outpack.metadata.PacketLocation]


   .. py:method:: metadata(ids: list[str]) -> dict[str, str]


   .. py:method:: fetch_file(packet: pyorderly.outpack.metadata.MetadataCore, file: pyorderly.outpack.metadata.PacketFile, dest: str)


