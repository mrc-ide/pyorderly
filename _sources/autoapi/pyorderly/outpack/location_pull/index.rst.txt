pyorderly.outpack.location_pull
===============================

.. py:module:: pyorderly.outpack.location_pull


Classes
-------

.. autoapisummary::

   pyorderly.outpack.location_pull.PullPlanInfo
   pyorderly.outpack.location_pull.LocationPullPlan
   pyorderly.outpack.location_pull.PullPlanPackets


Functions
---------

.. autoapisummary::

   pyorderly.outpack.location_pull.outpack_location_pull_metadata
   pyorderly.outpack.location_pull.outpack_location_pull_packet
   pyorderly.outpack.location_pull.location_pull_files
   pyorderly.outpack.location_pull.location_build_pull_plan


Module Contents
---------------

.. py:function:: outpack_location_pull_metadata(location=None, root=None, *, locate=True)

.. py:function:: outpack_location_pull_packet(ids: Union[str, list[str]], *, options: Optional[pyorderly.outpack.search_options.SearchOptions] = None, recursive: Optional[bool] = None, root: Union[str, pyorderly.outpack.root.OutpackRoot, None] = None, locate: bool = True)

.. py:function:: location_pull_files(files: list[pyorderly.outpack.metadata.PacketFileWithLocation], root: pyorderly.outpack.root.OutpackRoot) -> collections.abc.Generator[pyorderly.outpack.filestore.FileStore, None, None]

.. py:class:: PullPlanInfo

   .. py:attribute:: n_extra
      :type:  int


   .. py:attribute:: n_skip
      :type:  int


   .. py:attribute:: n_total
      :type:  int


.. py:class:: LocationPullPlan

   .. py:attribute:: packets
      :type:  dict[str, pyorderly.outpack.metadata.PacketLocation]


   .. py:attribute:: files
      :type:  list[pyorderly.outpack.metadata.PacketFileWithLocation]


   .. py:attribute:: info
      :type:  PullPlanInfo


.. py:class:: PullPlanPackets

   .. py:attribute:: requested
      :type:  list[str]


   .. py:attribute:: full
      :type:  list[str]


   .. py:attribute:: skip
      :type:  set[str]


   .. py:attribute:: fetch
      :type:  set[str]


.. py:function:: location_build_pull_plan(packet_ids: list[str], locations: Optional[list[str]], *, files: Optional[dict[str, list[str]]] = None, recursive: bool, root: pyorderly.outpack.root.OutpackRoot) -> LocationPullPlan

   Create a plan to pull packets from one or more locations.

   Parameters
   ----------
   packet_ids :
       A list of packet IDs to pull.

   locations :
       A list of location names from which to pull packets. If None, all
       configured locations will be considered.

   files :
       A filter restricting, for each packet, which file hashes to pull. This
       allows a subset of a packet's files to pulled. If None, or if a packet
       ID is mising from the dictionary, the entire packet is pulled.

   recursive :
       If True, all transitive dependencies of the requested packets will be
       pulled as well.

   root :
       The root object used to determine the location configuration and which
       files are missing and need pulling.


