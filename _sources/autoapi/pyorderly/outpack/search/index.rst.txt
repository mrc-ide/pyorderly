pyorderly.outpack.search
========================

.. py:module:: pyorderly.outpack.search


Classes
-------

.. autoapisummary::

   pyorderly.outpack.search.Query
   pyorderly.outpack.search.QueryEnv
   pyorderly.outpack.search.QueryIndex


Functions
---------

.. autoapisummary::

   pyorderly.outpack.search.as_query
   pyorderly.outpack.search.search
   pyorderly.outpack.search.search_unique
   pyorderly.outpack.search.eval_test_value
   pyorderly.outpack.search.eval_latest
   pyorderly.outpack.search.eval_single
   pyorderly.outpack.search.eval_test_one
   pyorderly.outpack.search.eval_test
   pyorderly.outpack.search.eval_boolean
   pyorderly.outpack.search.eval_negation
   pyorderly.outpack.search.eval_query


Module Contents
---------------

.. py:class:: Query

   .. py:attribute:: text
      :type:  str


   .. py:attribute:: node
      :type:  Any


   .. py:method:: __str__()


   .. py:method:: parse(text)
      :classmethod:



   .. py:method:: is_single_valued()

      Return true if the query is guaranteed to produce at most a single result.

      This could be either an expression wrapped in a `single(...)` or
      `latest(...)` call, or it is an ID lookup of the form `id == ...`.



.. py:class:: QueryEnv(root: pyorderly.outpack.root.OutpackRoot, options: pyorderly.outpack.search_options.SearchOptions, this: Optional[pyorderly.outpack.metadata.Parameters])

   .. py:attribute:: index


   .. py:attribute:: this


.. py:class:: QueryIndex(root, options)

   .. py:attribute:: root
      :type:  pyorderly.outpack.root.OutpackRoot


   .. py:attribute:: index
      :type:  Dict[str, pyorderly.outpack.metadata.MetadataCore]


   .. py:attribute:: options
      :type:  pyorderly.outpack.search_options.SearchOptions


.. py:function:: as_query(query: Union[Query, str]) -> Query

.. py:function:: search(query: Union[Query, str], *, root: Union[pyorderly.outpack.root.OutpackRoot, str, os.PathLike], options: Optional[pyorderly.outpack.search_options.SearchOptions] = None, this: Optional[pyorderly.outpack.metadata.Parameters] = None) -> Set[str]

   Search an outpack repository for all packets that match the given query.

   This may return zero or more packet IDs.


.. py:function:: search_unique(query: Union[Query, str], *, root: Union[pyorderly.outpack.root.OutpackRoot, str, os.PathLike], options: Optional[pyorderly.outpack.search_options.SearchOptions] = None, this: Optional[pyorderly.outpack.metadata.Parameters] = None)

   Search an outpack repository for a packet that matches the given query.

   Returns a single packet ID. Throws an exception if no packet is found or if
   the query is not syntactically guaranteed to find at most one.


.. py:function:: eval_test_value(node, env: QueryEnv, metadata: pyorderly.outpack.metadata.MetadataCore) -> Optional[Union[bool, int, float, str]]

.. py:function:: eval_latest(node: outpack_query_parser.Latest, env: QueryEnv) -> Set[str]

.. py:function:: eval_single(node: outpack_query_parser.Single, env: QueryEnv) -> Set[str]

.. py:function:: eval_test_one(node: outpack_query_parser.Test, env: QueryEnv, metadata: pyorderly.outpack.metadata.MetadataCore) -> bool

.. py:function:: eval_test(node: outpack_query_parser.Test, env: QueryEnv) -> Set[str]

.. py:function:: eval_boolean(node: outpack_query_parser.BooleanExpr, env: QueryEnv) -> Set[str]

.. py:function:: eval_negation(node: outpack_query_parser.Negation, env: QueryEnv) -> Set[str]

.. py:function:: eval_query(node, env: QueryEnv) -> Set[str]

